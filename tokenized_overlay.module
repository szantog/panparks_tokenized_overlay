<?php

/**
 * @file
 * Provides an image effect for adding overlay text to an image, using tokens in the same file entity.
 */

/**
 * Implements hook_image_effect_info().
 */
function tokenized_overlay_image_effect_info() {
  $effects = array();
  $effects['tokenized_overlay'] = array(
    'label' => t('Tokenized overlay'),
    'help' => t('Add overlay text to an image, using tokens in the same file entity.'),
    'effect callback' => 'tokenized_overlay_effect',
    'form callback' => 'tokenized_overlay_form',
  );
  return $effects;
}

/**
 * Image effect callback; add text to the image as an overlay.
 */
function tokenized_overlay_effect(&$image, $data) {
  // Verify that Drupal is using the PHP GD library for image manipulations
  // since this effect depends on functions in the GD library.
  if ($image->toolkit != 'gd') {
    watchdog('image', 'Creating text overlay failed on %path. Using non GD toolkit.',
      array('%path' => $image->source), WATCHDOG_ERROR);
    return FALSE;
  }


  $text = tokenized_overlay_text($image->source,
    $data['overlay_text_settings']['text'],
    $data['overlay_text_settings']['check_empty_token_values'],
    $data['overlay_text_settings']['fallback_text']
  );
  if (!$text) {
    // In this case the replaced text contains some empty value, and because of this we
    // don't want to place it onto the image, but there is no specified fallback text.
    // So we return without any image manipulation.
    return TRUE;
  }

  $textimage_preset = _textimage_preset_load($data['overlay_text_settings']['textimage_preset']);
  $textimage_resource = textimage_image_from_preset($textimage_preset, htmlspecialchars_decode($text));
  $text_width = imagesx($textimage_resource);
  $text_height = imagesy($textimage_resource);

  $pos = tokenized_overlay_position(
    $image->info['width'], $image->info['height'], $text_width, $text_height,
    $data['position_settings']['position'],
    $data['position_settings']['x_offset'],
    $data['position_settings']['y_offset']
  );

  imagealphablending($image->resource, TRUE);
  imagecopy($image->resource, $textimage_resource, $pos['x'], $pos['y'], 0, 0, $text_width, $text_height);
  return TRUE;
}

/**
 * Returns the text which will be placed onto the image.
 */
function tokenized_overlay_text($image_source, $text, $check_empty_token_values = FALSE, $fallback_text = '') {
  // If we're manipulating the sample image, we have to provide a sample text,
  // because there is no file entity in this case.
  if ($image_source == 'modules/image/sample.png') {
    return t('Sample text');
  }

  $files = entity_load('file', FALSE, array('uri' => $image_source));
  $file = !empty($files) ? reset($files) : FALSE;

  if ($check_empty_token_values) {
    $options = array('callback' => 'tokenized_overlay_replace_empty_token_value');
    $replaced_text = token_replace($text, array('file' => $file), $options);
    // The post process token replacement callback put '##empty##' in place of
    // empty token values.
    if (strpos($replaced_text, '##empty##') !== FALSE) {
      // If we find a string like this, that means there is an empty token value in the
      // replaced string, so returns the fallback text instead, unless it's not empty.
      if (drupal_strlen(trim($fallback_text)) != 0) {
        return $fallback_text;
      }
      else {
        // There is no defined fallback text, return FALSE, which means there will
        // be no image manipulation.
        return FALSE;
      }
    }
    // There is no empty token value, the replaced text can be returned as is.
    return $replaced_text;
  }

  // No need to check empty token values, returns the replaced text anyway.
  return token_replace($text, array('file' => $file));
}

/**
 * Post-process token replacement callback; change value to '##empty##' if a
 * token has no value.
 */
function tokenized_overlay_replace_empty_token_value(&$replacements) {
  foreach ($replacements as &$value) {
    if (drupal_strlen(trim($value)) == 0) {
      $value = '##empty##';
    }
  }
}

/**
 * Calculate the position of the overlay text.
 */
function tokenized_overlay_position($image_width, $image_height, $text_width, $text_height, $position, $x_offset, $y_offset) {
  $result = array(
    'x' => $x_offset,
    'y' => $y_offset,
  );
  $pos_parts = explode('-', $position);
  if ($pos_parts[0] == 'bottom') {
    $result['y'] = $image_height - $y_offset - $text_height;
  }
  if ($pos_parts[1] == 'right') {
    $result['x'] = $image_width - $x_offset - $text_width;
  }
  return $result;
}

/**
 * Implements hook_entity_update().
 */
function tokenized_overlay_entity_update($entity, $type) {
  if ($type == 'file' && $entity->type == 'image') {
    image_path_flush($entity->uri);
  }
}

/**
 * Form builder; configuration settings for the text overlay effect.
 */
function tokenized_overlay_form($data) {
  $form = array();

  $result = db_query("SELECT pid, name FROM {textimage_preset} ORDER BY name");
  $preset_list = array();
  foreach ($result as $preset) {
    $preset_list[$preset->pid] = $preset->name;
  }
  if (empty($preset_list)) {
    drupal_set_message(t('<a href="@add-preset">A Textimage preset</a> is needed to use this image effect.',
      array('@add-preset' => url('admin/config/media/textimage/preset/new'))), 'warning');
  }

  $form['overlay_text_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Overlay Text Settings'),
  );
  $form['overlay_text_settings']['textimage_preset'] = array(
    '#type' => 'select',
    '#title' => t('Textimage preset'),
    '#options' => $preset_list,
    '#default_value' => isset($data['overlay_text_settings']['textimage_preset']) ?
      $data['overlay_text_settings']['textimage_preset'] : '',
    '#description' => t('One of <a href="@presets">the Textimage presets</a> to be used for rendering the text.',
      array('@presets' => url('admin/config/media/textimage'))),
    '#required' => TRUE,
  );
  $form['overlay_text_settings']['text'] = array(
    '#type' => 'textfield',
    '#title' => t('Text'),
    '#description' => t('The text to use when place overlay onto the image.'),
    '#default_value' => isset($data['overlay_text_settings']['text']) ?
      $data['overlay_text_settings']['text'] : '',
    '#required' => TRUE,
    '#size' => 90,
  );
  $form['overlay_text_settings']['replacement_patterns'] = array(
    '#type' => 'fieldset',
    '#title' => t('Replacement patterns'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['overlay_text_settings']['replacement_patterns']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('file'),
  );
  $form['overlay_text_settings']['check_empty_token_values'] = array(
    '#type' => 'checkbox',
    '#title' => t('Check empty token values'),
    '#default_value' => isset($data['overlay_text_settings']['check_empty_token_values']) ?
      $data['overlay_text_settings']['check_empty_token_values'] : 0,
    '#description' => t('In some cases token values can be empty (e.g. when a non-required field in the file entity has no value). You can decide wether you use the replaced text anyway, with the missing token value, or define a fallback text for this case.')
  );
  $form['overlay_text_settings']['fallback_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Fallback text'),
    '#description' => t('If checking empty token values is enabled, this text will be used when one of the tokens in the configured text above returns an empty string. You can leave it empty, in this case there will be no image manipulation by this image effect at all. Do not use tokens here.'),
    '#default_value' => isset($data['overlay_text_settings']['fallback_text']) ?
      $data['overlay_text_settings']['fallback_text'] : '',
    '#size' => 90,
    '#states' => array(
      'visible' => array(
        ':input[name="data[overlay_text_settings][check_empty_token_values]"]' =>
          array('checked' => TRUE),
      ),
    ),
  );
  $form['position_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Position Settings'),
  );
  $form['position_settings']['position'] = array(
    '#title' => t('Position'),
    '#type' => 'radios',
    '#options' => array(
      'bottom-left' => t('Bottom left'),
      'bottom-right' => t('Bottom right'),
      'top-left' => t('Top left'),
      'top-right' => t('Top right'),
    ),
    '#description' => t('Text overlay position on the image.'),
    '#default_value' => isset($data['position_settings']['position']) ?
      $data['position_settings']['position'] : 'bottom-left',
    '#required' => TRUE,
  );
  $form['position_settings']['x_offset'] = array(
    '#type' => 'textfield',
    '#title' => t('X offset'),
    '#description' => t('Distance from the left/right margin of the image in pixels.'),
    '#default_value' => isset($data['position_settings']['x_offset']) ?
      $data['position_settings']['x_offset'] : 10,
    '#required' => TRUE,
    '#size' => 3,
  );
  $form['position_settings']['y_offset'] = array(
    '#type' => 'textfield',
    '#title' => t('Y offset'),
    '#description' => t('Distance from the bottom/top margin of the image in pixels.'),
    '#default_value' => isset($data['position_settings']['y_offset']) ?
      $data['position_settings']['y_offset'] : 10,
    '#required' => TRUE,
    '#size' => 3,
  );
  return $form;
}

